{"version":3,"file":"static/js/657.b97429d0.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.jsx","services/api.js","helpers/getGenres.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLocation, useParams, Link } from 'react-router-dom';\nimport { BsArrowLeft } from 'react-icons/bs';\n\nimport { getDetailedFilmInfo } from 'services/api';\nimport { routes } from 'helpers/routes';\nimport { MovieInfo, Loader, Box } from 'components/index';\n\nconst MovieDetailsPage = () => {\n  const [detailedInfo, setDetailedInfo] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (movieId === null) return;\n\n    async function getDetailedInfo() {\n      try {\n        setIsLoading(true);\n\n        const data = await getDetailedFilmInfo(movieId);\n        setDetailedInfo(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getDetailedInfo();\n  }, [movieId]);\n\n  // const defaultImg =\n  //   'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  return (\n    <>\n      {error && <div>Try to reload the page</div>}\n      {isLoading && <Loader />}\n      <Box\n        mt={32}\n        mb={0}\n        ml=\"10%\"\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"flex-end\"\n        width={90}\n      >\n        <BsArrowLeft size={20} />{' '}\n        <Link to={location.state?.from ?? routes.HOME}>Go back</Link>\n      </Box>\n\n      {detailedInfo && (\n        // <div>\n        //   {/* Other movie details */}\n        //   <img\n        //     src={\n        //       detailedInfo.poster_path\n        //         ? `https://image.tmdb.org/t/p/w500/${detailedInfo.poster_path}`\n        //         : defaultImg\n        //     }\n        //     width={250}\n        //     alt=\"poster\"\n        //   />\n           <MovieInfo detailedInfo={detailedInfo} />\n        // </div>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\nimport defaultPhoto from 'img/default-photo.jpeg';\nimport defaultActor from 'img/defaultPerson.jpeg';\nimport { getGenres } from 'helpers/getGenres';\n// import defaultImg from 'path/to/defaultImg'; \n\n\n// // const API_KEY = 'c408143b5b9b33be7013bb99b759f838';\nconst API_KEY = '48a6f07a25987cf4ac63d30acb4cff08';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get('/trending/movie/week', { params });\n  const results = data.results.map(({ id, title }) => ({ id, title }));\n  return { results };\n};\n\nexport const getFilmByQuery = async q => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    query: q,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const results = data.results.map(({ id, original_title }) => ({\n    id,\n    title: original_title,\n  }));\n  return { results };\n};\n\nexport const getDetailedFilmInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  const {\n    id,\n    original_title,\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = data;\n\n  return {\n    id,\n    original_title,\n    genres: genres.length ? getGenres(genres) : \"Genres aren't given\",\n    overview,\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w300' + poster_path\n      : defaultPhoto,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: Math.round(vote_average * 10),\n  };\n};\n\nexport const getCastInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n\n  const array = data.cast.map(\n    ({ id, original_name, profile_path, character }) => ({\n      id,\n      original_name,\n      profile_path: profile_path\n        ? 'https://image.tmdb.org/t/p/w300' + profile_path\n        : defaultActor,\n      character,\n    })\n  );\n  return array;\n};\n\nexport const getReviewsInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const array = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  return array;\n};\n\n// import axios from 'axios';\n\n// const API_KEY = '48a6f07a25987cf4ac63d30acb4cff08';\n// const BASE_URL = 'https://api.themoviedb.org/3';\n// export const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\n// const END_POINTS = {\n//   trending: '/trending/movie/week',\n//   querySearch: '/search/movie',\n//   movieDetails: '/movie',\n//   movieCredits: '/credits',\n//   movieReviews: '/reviews',\n// };\n\n// axios.defaults.baseURL = BASE_URL;\n// axios.defaults.params = {\n//   api_key: API_KEY,\n//   language: 'en-US',\n//   include_adult: false,\n// };\n\n// export const getMovies = async (page = 1) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.trending}`, {\n//     params: { page },\n//   });\n//   return res.data.results;\n// };\n\n// export const fetchByQuery = async (query, page = 1) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.querySearch}`, {\n//     params: { query, page },\n//   });\n//   return res.data.results;\n// };\n\n// export const fetchMoviesDetails = async (id) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.movieDetails}/${id}`);\n//   return res.data;\n// };\n\n// export const fetchMoviesCredits = async (id) => {\n//   const res = await axios.get(\n//     `${BASE_URL}${END_POINTS.movieDetails}/${id}${END_POINTS.movieCredits}`\n//   );\n//   return res.data.cast;\n// };\n\n// export const fetchMoviesReviews = async (id, page = 1) => {\n//   const res = await axios.get(\n//     `${BASE_URL}${END_POINTS.movieDetails}/${id}${END_POINTS.movieReviews}`,\n//     {\n//       params: { page },\n//     }\n//   );\n//   return res.data.results;\n// };\n\n// export function fetchMovieSearch(query) {\n//   return axios\n//     .get(`${BASE_URL}${END_POINTS.querySearch}`, {\n//       params: { query, page: 1 },\n//     })\n//     .then(response => {\n//       if (response.data && response.data.results) {\n//         return response.data.results;\n//       } else {\n//         throw new Error('Invalid response format');\n//       }\n//     })\n//     .catch(error => {\n//       console.error('Error fetching movies:', error);\n//       throw error;\n//     });\n// }\n\n// import axios from 'axios';\n\n// const BASE_URL = 'https://api.themoviedb.org/3';\n// export const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\n// const END_POINTS = {\n//   trending: '/trending/movie/week',\n//   querySearch: '/search/movie',\n//   movieDetails: '/movie',\n//   movieCredits: '/credits',\n//   movieReviews: '/reviews',\n// };\n\n// // Set the default headers for all requests\n// axios.defaults.baseURL = BASE_URL;\n// axios.defaults.headers.common['Authorization'] =\n//   'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI0OGE2ZjA3YTI1OTg3Y2Y0YWM2M2QzMGFjYjRjZmYwOCIsInN1YiI6IjY0ODgzMWI1ZTI3MjYwMDEyODdiNWRjOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.KKmeR4CGfy8trQQTf3L_cjfaW6uqP2oo_kr86Vvxm7Y';\n// axios.defaults.headers.common['Accept'] = 'application/json';\n\n// export const getMovies = async (page = 1) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.trending}`, {\n//     params: { page },\n//   });\n//   return res.data.results;\n// };\n\n// export const fetchByQuery = async (query, page = 1) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.querySearch}`, {\n//     params: { query, page },\n//   });\n//   return res.data.results;\n// };\n\n// export const fetchMoviesDetails = async id => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.movieDetails}/${id}`);\n//   return res.data;\n// };\n\n// export const fetchMoviesCredits = async id => {\n//   const res = await axios.get(\n//     `${BASE_URL}${END_POINTS.movieDetails}/${id}${END_POINTS.movieCredits}`\n//   );\n//   return res.data.cast;\n// };\n\n// export const fetchMoviesReviews = async (id, page = 1) => {\n//   const res = await axios.get(\n//     `${BASE_URL}${END_POINTS.movieDetails}/${id}${END_POINTS.movieReviews}`,\n//     {\n//       params: { page },\n//     }\n//   );\n//   return res.data.results;\n// };\n\n// export function fetchMovieSearch(query) {\n//   return axios\n//     .get(`${BASE_URL}${END_POINTS.querySearch}`, {\n//       params: { query, page: 1 },\n//     })\n//     .then(response => {\n//       if (response.data && response.data.results) {\n//         return response.data.results;\n//       } else {\n//         throw new Error('Invalid response format');\n//       }\n//     })\n//     .catch(error => {\n//       console.error('Error fetching movies:', error);\n//       throw error;\n//     });\n// }\n","export const getGenres = array => {\n  return array.map(el => el.name).join(', ');\n};\n"],"names":["useState","detailedInfo","setDetailedInfo","error","setError","isLoading","setIsLoading","location","useLocation","movieId","useParams","useEffect","getDetailedFilmInfo","data","message","getDetailedInfo","mt","mb","ml","display","justifyContent","alignItems","width","size","to","state","from","routes","API_KEY","axios","getTrendingFilms","params","api_key","results","map","id","title","getFilmByQuery","q","language","query","original_title","genres","overview","poster_path","release_date","vote_average","length","array","el","name","join","defaultPhoto","Date","getFullYear","Math","round","getCastInfo","cast","original_name","profile_path","character","getReviewsInfo","author","content"],"sourceRoot":""}