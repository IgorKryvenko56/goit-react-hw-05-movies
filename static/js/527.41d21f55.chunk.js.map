{"version":3,"file":"static/js/527.41d21f55.chunk.js","mappings":"wOA6CA,UAxCmB,WACjB,OAA4CA,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAgBF,EAAaG,IAAI,UAEvCC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,sGAEIN,GAAa,GAFjB,UAI8BO,EAAAA,EAAAA,IAAeH,GAJ7C,gBAIYI,EAJZ,EAIYA,QAERZ,EAAkBY,GANtB,gDAQIV,EAAS,KAAMW,SARnB,yBAUIT,GAAa,GAVjB,6EAFc,sBACTI,GADS,mCAedM,EACD,GAAE,CAACN,IAMJ,OACE,gCACGP,IAAS,yBAAK,2BACdE,IAAa,SAAC,KAAD,KACd,SAAC,KAAD,CAAMY,SARa,SAAAC,GACrBT,EAAgB,CAAEU,MAAOD,GAC1B,IAOIE,QAAQnB,EAAeoB,UAAW,SAAC,KAAD,CAAWC,MAAOrB,MAG1D,C,gQCnCKsB,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAgB,mCAAG,iGACxBC,EAAS,CACbC,QAASJ,GAFmB,SAIPC,EAAAA,EAAAA,IAAU,uBAAwB,CAAEE,OAAAA,IAJ7B,uBAItBE,EAJsB,EAItBA,KACFd,EAAUc,EAAKd,QAAQe,KAAI,kBAAoB,CAAEC,GAAtB,EAAGA,GAAuBC,MAA1B,EAAOA,MAAP,IALH,kBAMvB,CAAEjB,QAAAA,IANqB,2CAAH,qDAShBD,EAAc,mCAAG,WAAMmB,GAAN,oFACtBN,EAAS,CACbC,QAASJ,EACTU,SAAU,QACVd,MAAOa,GAJmB,SAMLR,EAAAA,EAAAA,IAAU,gBAAiB,CAAEE,OAAAA,IANxB,uBAMpBE,EANoB,EAMpBA,KACFd,EAAUc,EAAKd,QAAQe,KAAI,kBAA6B,CAC5DC,GAD+B,EAAGA,GAElCC,MAF+B,EAAOG,eAAP,IAPL,kBAWrB,CAAEpB,QAAAA,IAXmB,2CAAH,sDAcdqB,EAAmB,mCAAG,WAAMC,GAAN,gGAC3BV,EAAS,CACbC,QAASJ,GAFsB,SAIVC,EAAAA,EAAAA,IAAA,iBAAoBY,GAAW,CAAEV,OAAAA,IAJvB,uBAIzBE,EAJyB,EAIzBA,KAENE,EAOEF,EAPFE,GACAI,EAMEN,EANFM,eACAG,EAKET,EALFS,OACAC,EAIEV,EAJFU,SACAC,EAGEX,EAHFW,YACAC,EAEEZ,EAFFY,aACAC,EACEb,EADFa,aAZ+B,kBAe1B,CACLX,GAAAA,EACAI,eAAAA,EACAG,OAAQA,EAAOhB,QCpDMC,EDoDae,ECnD7Bf,EAAMO,KAAI,SAAAa,GAAE,OAAIA,EAAGC,IAAP,IAAaC,KAAK,ODmDS,sBAC5CN,SAAAA,EACAC,YAAaA,EACT,kCAAoCA,EACpCM,EACJL,aAAc,IAAIM,KAAKN,GAAcO,cACrCN,aAAcO,KAAKC,MAAqB,GAAfR,KAxBM,iCClCV,IAAAnB,CDkCU,UAAH,sDA4BnB4B,EAAW,mCAAG,WAAMd,GAAN,oFACnBV,EAAS,CACbC,QAASJ,EACTU,SAAU,SAHa,SAKFT,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,YAAuC,CAAEV,OAAAA,IALvC,uBAKjBE,EALiB,EAKjBA,KAEFN,EAAQM,EAAKuB,KAAKtB,KACtB,gBAAGC,EAAH,EAAGA,GAAIsB,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,aAAtB,MAAqD,CACnDvB,GAAAA,EACAsB,cAAAA,EACAC,aAAcA,EACV,kCAAoCA,E,0uFAExCC,UANF,EAAoCA,UAApC,IARuB,kBAiBlBhC,GAjBkB,2CAAH,sDAoBXiC,EAAc,mCAAG,WAAMnB,GAAN,oFACtBV,EAAS,CACbC,QAASJ,EACTU,SAAU,SAHgB,SAKLT,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,YAAuC,CAAEV,OAAAA,IALpC,uBAKpBE,EALoB,EAKpBA,KAEFN,EAAQM,EAAKd,QAAQe,KAAI,kBAA8B,CAC3DC,GAD6B,EAAGA,GAEhC0B,OAF6B,EAAOA,OAGpCC,QAH6B,EAAeA,QAAf,IAPH,kBAarBnC,GAbqB,2CAAH,qD","sources":["pages/Movies/Movies.jsx","services/api.js","helpers/getGenres.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getFilmByQuery } from 'services/api';\nimport { Form, Loader, MovieList } from 'components/index';\n\nconst MoviesPage = () => {\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const querySearched = searchParams.get('query');\n\n  useEffect(() => {\n    if (!querySearched) return;\n    async function getFilms() {\n      try {\n        setIsLoading(true);\n\n        const { results } = await getFilmByQuery(querySearched);\n\n        setSearchedMovies(results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getFilms();\n  }, [querySearched]);\n\n  const handleOnSubmit = value => {\n    setSearchParams({ query: value });\n  };\n\n  return (\n    <>\n      {error && <div>Try to reload the page</div>}\n      {isLoading && <Loader />}\n      <Form onSubmit={handleOnSubmit} />\n      {Boolean(searchedMovies.length) && <MovieList array={searchedMovies} />}\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\nimport defaultPhoto from 'img/default-photo.jpeg';\nimport defaultActor from 'img/defaultPerson.jpeg';\nimport { getGenres } from 'helpers/getGenres';\n// import defaultImg from 'path/to/defaultImg'; \n\n\n// // const API_KEY = 'c408143b5b9b33be7013bb99b759f838';\nconst API_KEY = '48a6f07a25987cf4ac63d30acb4cff08';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get('/trending/movie/week', { params });\n  const results = data.results.map(({ id, title }) => ({ id, title }));\n  return { results };\n};\n\nexport const getFilmByQuery = async q => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    query: q,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const results = data.results.map(({ id, original_title }) => ({\n    id,\n    title: original_title,\n  }));\n  return { results };\n};\n\nexport const getDetailedFilmInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  const {\n    id,\n    original_title,\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = data;\n\n  return {\n    id,\n    original_title,\n    genres: genres.length ? getGenres(genres) : \"Genres aren't given\",\n    overview,\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w300' + poster_path\n      : defaultPhoto,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: Math.round(vote_average * 10),\n  };\n};\n\nexport const getCastInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n\n  const array = data.cast.map(\n    ({ id, original_name, profile_path, character }) => ({\n      id,\n      original_name,\n      profile_path: profile_path\n        ? 'https://image.tmdb.org/t/p/w300' + profile_path\n        : defaultActor,\n      character,\n    })\n  );\n  return array;\n};\n\nexport const getReviewsInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const array = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  return array;\n};\n\n// import axios from 'axios';\n\n// const API_KEY = '48a6f07a25987cf4ac63d30acb4cff08';\n// const BASE_URL = 'https://api.themoviedb.org/3';\n// export const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\n// const END_POINTS = {\n//   trending: '/trending/movie/week',\n//   querySearch: '/search/movie',\n//   movieDetails: '/movie',\n//   movieCredits: '/credits',\n//   movieReviews: '/reviews',\n// };\n\n// axios.defaults.baseURL = BASE_URL;\n// axios.defaults.params = {\n//   api_key: API_KEY,\n//   language: 'en-US',\n//   include_adult: false,\n// };\n\n// export const getMovies = async (page = 1) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.trending}`, {\n//     params: { page },\n//   });\n//   return res.data.results;\n// };\n\n// export const fetchByQuery = async (query, page = 1) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.querySearch}`, {\n//     params: { query, page },\n//   });\n//   return res.data.results;\n// };\n\n// export const fetchMoviesDetails = async (id) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.movieDetails}/${id}`);\n//   return res.data;\n// };\n\n// export const fetchMoviesCredits = async (id) => {\n//   const res = await axios.get(\n//     `${BASE_URL}${END_POINTS.movieDetails}/${id}${END_POINTS.movieCredits}`\n//   );\n//   return res.data.cast;\n// };\n\n// export const fetchMoviesReviews = async (id, page = 1) => {\n//   const res = await axios.get(\n//     `${BASE_URL}${END_POINTS.movieDetails}/${id}${END_POINTS.movieReviews}`,\n//     {\n//       params: { page },\n//     }\n//   );\n//   return res.data.results;\n// };\n\n// export function fetchMovieSearch(query) {\n//   return axios\n//     .get(`${BASE_URL}${END_POINTS.querySearch}`, {\n//       params: { query, page: 1 },\n//     })\n//     .then(response => {\n//       if (response.data && response.data.results) {\n//         return response.data.results;\n//       } else {\n//         throw new Error('Invalid response format');\n//       }\n//     })\n//     .catch(error => {\n//       console.error('Error fetching movies:', error);\n//       throw error;\n//     });\n// }\n\n// import axios from 'axios';\n\n// const BASE_URL = 'https://api.themoviedb.org/3';\n// export const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\n// const END_POINTS = {\n//   trending: '/trending/movie/week',\n//   querySearch: '/search/movie',\n//   movieDetails: '/movie',\n//   movieCredits: '/credits',\n//   movieReviews: '/reviews',\n// };\n\n// // Set the default headers for all requests\n// axios.defaults.baseURL = BASE_URL;\n// axios.defaults.headers.common['Authorization'] =\n//   'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI0OGE2ZjA3YTI1OTg3Y2Y0YWM2M2QzMGFjYjRjZmYwOCIsInN1YiI6IjY0ODgzMWI1ZTI3MjYwMDEyODdiNWRjOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.KKmeR4CGfy8trQQTf3L_cjfaW6uqP2oo_kr86Vvxm7Y';\n// axios.defaults.headers.common['Accept'] = 'application/json';\n\n// export const getMovies = async (page = 1) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.trending}`, {\n//     params: { page },\n//   });\n//   return res.data.results;\n// };\n\n// export const fetchByQuery = async (query, page = 1) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.querySearch}`, {\n//     params: { query, page },\n//   });\n//   return res.data.results;\n// };\n\n// export const fetchMoviesDetails = async id => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.movieDetails}/${id}`);\n//   return res.data;\n// };\n\n// export const fetchMoviesCredits = async id => {\n//   const res = await axios.get(\n//     `${BASE_URL}${END_POINTS.movieDetails}/${id}${END_POINTS.movieCredits}`\n//   );\n//   return res.data.cast;\n// };\n\n// export const fetchMoviesReviews = async (id, page = 1) => {\n//   const res = await axios.get(\n//     `${BASE_URL}${END_POINTS.movieDetails}/${id}${END_POINTS.movieReviews}`,\n//     {\n//       params: { page },\n//     }\n//   );\n//   return res.data.results;\n// };\n\n// export function fetchMovieSearch(query) {\n//   return axios\n//     .get(`${BASE_URL}${END_POINTS.querySearch}`, {\n//       params: { query, page: 1 },\n//     })\n//     .then(response => {\n//       if (response.data && response.data.results) {\n//         return response.data.results;\n//       } else {\n//         throw new Error('Invalid response format');\n//       }\n//     })\n//     .catch(error => {\n//       console.error('Error fetching movies:', error);\n//       throw error;\n//     });\n// }\n","export const getGenres = array => {\n  return array.map(el => el.name).join(', ');\n};\n"],"names":["useState","searchedMovies","setSearchedMovies","error","setError","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","querySearched","get","useEffect","getFilmByQuery","results","message","getFilms","onSubmit","value","query","Boolean","length","array","API_KEY","axios","getTrendingFilms","params","api_key","data","map","id","title","q","language","original_title","getDetailedFilmInfo","movieId","genres","overview","poster_path","release_date","vote_average","el","name","join","defaultPhoto","Date","getFullYear","Math","round","getCastInfo","cast","original_name","profile_path","character","getReviewsInfo","author","content"],"sourceRoot":""}