{"version":3,"file":"static/js/111.ec006d6f.chunk.js","mappings":"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","sources":["pages/MovieDetails/Cast/Cast.styled.js","pages/MovieDetails/Cast/Cast.jsx","services/api.js","helpers/getGenres.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  padding: ${p => p.theme.space[5]}px ${p => p.theme.space[4]}px;\n  gap: ${p => p.theme.space[4]}px;\n`;\n\nexport const CastItem = styled.li`\n  flex-basis: calc((100% - 4 * 16px) / 5);\n\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.space[3]}px;\n\n  img {\n    width: 200px;\n    border-radius: ${p => p.theme.radii.normal};\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastInfo } from 'services/api';\nimport { Loader } from 'components/index';\n\nimport { CastList, CastItem } from './Cast.styled';\n\nconst Cast = () => {\n  const [castInfo, setCastInfo] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (movieId === null) return;\n\n    async function getApiCastInfo() {\n      try {\n        setIsLoading(true);\n\n        const array = await getCastInfo(movieId);\n\n        setCastInfo(array);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getApiCastInfo();\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <div>Try to reload the page</div>}\n      {isLoading && <Loader />}\n      {castInfo && (\n        <CastList>\n          {castInfo.map(({ id, original_name, profile_path, character }) => {\n            return (\n              <CastItem key={id}>\n                <img src={profile_path} alt={original_name} />\n                <p>{original_name}</p>\n                <p>{character}</p>\n              </CastItem>\n            );\n          })}\n        </CastList>\n      )}\n      {castInfo.length === 0 && (\n        <div>There isn't any information about the movie cast.</div>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport defaultPhoto from 'img/default-photo.jpeg';\nimport defaultActor from 'img/defaultPerson.jpeg';\nimport { getGenres } from 'helpers/getGenres';\n// import defaultImg from 'path/to/defaultImg'; \n\n\n// // const API_KEY = 'c408143b5b9b33be7013bb99b759f838';\nconst API_KEY = '48a6f07a25987cf4ac63d30acb4cff08';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get('/trending/movie/week', { params });\n  const results = data.results.map(({ id, title }) => ({ id, title }));\n  return { results };\n};\n\nexport const getFilmByQuery = async q => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    query: q,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const results = data.results.map(({ id, original_title }) => ({\n    id,\n    title: original_title,\n  }));\n  return { results };\n};\n\nexport const getDetailedFilmInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  const {\n    id,\n    original_title,\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = data;\n\n  return {\n    id,\n    original_title,\n    genres: genres.length ? getGenres(genres) : \"Genres aren't given\",\n    overview,\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w300' + poster_path\n      : defaultPhoto,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: Math.round(vote_average * 10),\n  };\n};\n\nexport const getCastInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n\n  const array = data.cast.map(\n    ({ id, original_name, profile_path, character }) => ({\n      id,\n      original_name,\n      profile_path: profile_path\n        ? 'https://image.tmdb.org/t/p/w300' + profile_path\n        : defaultActor,\n      character,\n    })\n  );\n  return array;\n};\n\nexport const getReviewsInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const array = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  return array;\n};\n\n// import axios from 'axios';\n\n// const API_KEY = '48a6f07a25987cf4ac63d30acb4cff08';\n// const BASE_URL = 'https://api.themoviedb.org/3';\n// export const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\n// const END_POINTS = {\n//   trending: '/trending/movie/week',\n//   querySearch: '/search/movie',\n//   movieDetails: '/movie',\n//   movieCredits: '/credits',\n//   movieReviews: '/reviews',\n// };\n\n// axios.defaults.baseURL = BASE_URL;\n// axios.defaults.params = {\n//   api_key: API_KEY,\n//   language: 'en-US',\n//   include_adult: false,\n// };\n\n// export const getMovies = async (page = 1) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.trending}`, {\n//     params: { page },\n//   });\n//   return res.data.results;\n// };\n\n// export const fetchByQuery = async (query, page = 1) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.querySearch}`, {\n//     params: { query, page },\n//   });\n//   return res.data.results;\n// };\n\n// export const fetchMoviesDetails = async (id) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.movieDetails}/${id}`);\n//   return res.data;\n// };\n\n// export const fetchMoviesCredits = async (id) => {\n//   const res = await axios.get(\n//     `${BASE_URL}${END_POINTS.movieDetails}/${id}${END_POINTS.movieCredits}`\n//   );\n//   return res.data.cast;\n// };\n\n// export const fetchMoviesReviews = async (id, page = 1) => {\n//   const res = await axios.get(\n//     `${BASE_URL}${END_POINTS.movieDetails}/${id}${END_POINTS.movieReviews}`,\n//     {\n//       params: { page },\n//     }\n//   );\n//   return res.data.results;\n// };\n\n// export function fetchMovieSearch(query) {\n//   return axios\n//     .get(`${BASE_URL}${END_POINTS.querySearch}`, {\n//       params: { query, page: 1 },\n//     })\n//     .then(response => {\n//       if (response.data && response.data.results) {\n//         return response.data.results;\n//       } else {\n//         throw new Error('Invalid response format');\n//       }\n//     })\n//     .catch(error => {\n//       console.error('Error fetching movies:', error);\n//       throw error;\n//     });\n// }\n\n// import axios from 'axios';\n\n// const BASE_URL = 'https://api.themoviedb.org/3';\n// export const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\n// const END_POINTS = {\n//   trending: '/trending/movie/week',\n//   querySearch: '/search/movie',\n//   movieDetails: '/movie',\n//   movieCredits: '/credits',\n//   movieReviews: '/reviews',\n// };\n\n// // Set the default headers for all requests\n// axios.defaults.baseURL = BASE_URL;\n// axios.defaults.headers.common['Authorization'] =\n//   'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI0OGE2ZjA3YTI1OTg3Y2Y0YWM2M2QzMGFjYjRjZmYwOCIsInN1YiI6IjY0ODgzMWI1ZTI3MjYwMDEyODdiNWRjOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.KKmeR4CGfy8trQQTf3L_cjfaW6uqP2oo_kr86Vvxm7Y';\n// axios.defaults.headers.common['Accept'] = 'application/json';\n\n// export const getMovies = async (page = 1) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.trending}`, {\n//     params: { page },\n//   });\n//   return res.data.results;\n// };\n\n// export const fetchByQuery = async (query, page = 1) => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.querySearch}`, {\n//     params: { query, page },\n//   });\n//   return res.data.results;\n// };\n\n// export const fetchMoviesDetails = async id => {\n//   const res = await axios.get(`${BASE_URL}${END_POINTS.movieDetails}/${id}`);\n//   return res.data;\n// };\n\n// export const fetchMoviesCredits = async id => {\n//   const res = await axios.get(\n//     `${BASE_URL}${END_POINTS.movieDetails}/${id}${END_POINTS.movieCredits}`\n//   );\n//   return res.data.cast;\n// };\n\n// export const fetchMoviesReviews = async (id, page = 1) => {\n//   const res = await axios.get(\n//     `${BASE_URL}${END_POINTS.movieDetails}/${id}${END_POINTS.movieReviews}`,\n//     {\n//       params: { page },\n//     }\n//   );\n//   return res.data.results;\n// };\n\n// export function fetchMovieSearch(query) {\n//   return axios\n//     .get(`${BASE_URL}${END_POINTS.querySearch}`, {\n//       params: { query, page: 1 },\n//     })\n//     .then(response => {\n//       if (response.data && response.data.results) {\n//         return response.data.results;\n//       } else {\n//         throw new Error('Invalid response format');\n//       }\n//     })\n//     .catch(error => {\n//       console.error('Error fetching movies:', error);\n//       throw error;\n//     });\n// }\n","export const getGenres = array => {\n  return array.map(el => el.name).join(', ');\n};\n"],"names":["CastList","styled","p","theme","space","CastItem","radii","normal","useState","castInfo","setCastInfo","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","getCastInfo","array","message","getApiCastInfo","map","id","original_name","profile_path","character","src","alt","length","API_KEY","axios","getTrendingFilms","params","api_key","data","results","title","getFilmByQuery","q","language","query","original_title","getDetailedFilmInfo","genres","overview","poster_path","release_date","vote_average","el","name","join","defaultPhoto","Date","getFullYear","Math","round","cast","getReviewsInfo","author","content"],"sourceRoot":""}